{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7242/api/auth/login';\n    this.isLoggedInSubject = new BehaviorSubject(false); // Subject para almacenar el estado de inicio de sesión\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable(); // Observable para acceder al estado de inicio de sesión\n  }\n  // Método para iniciar sesión\n  login(loginRequest) {\n    return this.http.post(this.apiUrl, loginRequest).pipe(tap(response => {\n      // Verificar si el inicio de sesión fue exitoso\n      if (response && response.success) {\n        // Actualizar el estado de inicio de sesión a true\n        this.isLoggedInSubject.next(true);\n      } else {\n        // Manejar caso de inicio de sesión fallido\n        console.error('Inicio de sesión fallido. Por favor, revise sus credenciales.');\n      }\n    }));\n  }\n  // Método para cerrar sesión\n  logout() {\n    // Aquí puedes realizar cualquier lógica adicional necesaria para cerrar sesión, como eliminar tokens JWT, limpiar el almacenamiento local, etc.\n    this.isLoggedInSubject.next(false); // Actualiza el estado de inicio de sesión a false al cerrar sesión\n  }\n  // Método para obtener el estado de inicio de sesión de manera síncrona\n  isLoggedIn() {\n    return this.isLoggedInSubject.value;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,sBAAiB,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC,CAAC,CAAC;IACjE,gBAAW,GAAG,IAAI,CAACK,iBAAiB,CAACC,YAAY,EAAE,CAAC,CAAC;EAEd;EAEvC;EACAC,KAAK,CAACC,YAA0B;IAC9B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACC,MAAM,EAAEF,YAAY,CAAC,CAACG,IAAI,CACxDV,GAAG,CAACW,QAAQ,IAAG;MACb;MACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChC;QACA,IAAI,CAACR,iBAAiB,CAACS,IAAI,CAAC,IAAI,CAAC;OAClC,MAAM;QACL;QACAC,OAAO,CAACC,KAAK,CAAC,+DAA+D,CAAC;;IAElF,CAAC,CAAC,CACH;EACH;EAEA;EACAC,MAAM;IACJ;IACA,IAAI,CAACZ,iBAAiB,CAACS,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACtC;EAEA;EACAI,UAAU;IACR,OAAO,IAAI,CAACb,iBAAiB,CAACc,KAAK;EACrC;;AAhCWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["BehaviorSubject","tap","AuthService","constructor","http","isLoggedInSubject","asObservable","login","loginRequest","post","apiUrl","pipe","response","success","next","console","error","logout","isLoggedIn","value","factory","providedIn"],"sourceRoot":"","sources":["E:\\PruebaTecnicaCastor\\PuebaNN.S.A\\PuebaNN.S.A\\ClientApp\\src\\app\\login\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { LoginRequest } from './login-request';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'https://localhost:7242/api/auth/login';\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false); // Subject para almacenar el estado de inicio de sesión\r\n  isLoggedIn$ = this.isLoggedInSubject.asObservable(); // Observable para acceder al estado de inicio de sesión\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Método para iniciar sesión\r\n  login(loginRequest: LoginRequest): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl, loginRequest).pipe(\r\n      tap(response => {\r\n        // Verificar si el inicio de sesión fue exitoso\r\n        if (response && response.success) {\r\n          // Actualizar el estado de inicio de sesión a true\r\n          this.isLoggedInSubject.next(true);\r\n        } else {\r\n          // Manejar caso de inicio de sesión fallido\r\n          console.error('Inicio de sesión fallido. Por favor, revise sus credenciales.');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Método para cerrar sesión\r\n  logout(): void {\r\n    // Aquí puedes realizar cualquier lógica adicional necesaria para cerrar sesión, como eliminar tokens JWT, limpiar el almacenamiento local, etc.\r\n    this.isLoggedInSubject.next(false); // Actualiza el estado de inicio de sesión a false al cerrar sesión\r\n  }\r\n\r\n  // Método para obtener el estado de inicio de sesión de manera síncrona\r\n  isLoggedIn(): boolean {\r\n    return this.isLoggedInSubject.value;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}